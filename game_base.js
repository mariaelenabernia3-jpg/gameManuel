// =============================================================
//          MOTOR BASE DEL JUEGO (NO MODIFICAR)
// =============================================================
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const GAME_SETTINGS_KEY = 'aceCraftGameSettings';
let score=0, isPaused=true, isGameOver=false, difficultyMultiplier=1, coinMultiplier=1, activeControl='none', currentPhaseIndex=0;
let stars=[]; let combo={count:0,multiplier:1,timer:0}; const entityArrays={bossProjectiles:[],playerBullets:[],explosions:[],minions:[],powerUps:[],minionProjectiles:[],companionBullets:[]}; let companion=null;
function loadImage(src){const img=new Image();img.src=src;return img}
const sprites={playerShips:{interceptor:loadImage('assets/nave.png'),vanguard:loadImage('assets/nave2.png'),striker:loadImage('assets/nave3.png')},player:null,bosses:[loadImage('assets/Boss1.png'),loadImage('assets/Boss2.png'),loadImage('assets/Boss3.png')],powerUps:{tripleShot:loadImage('assets/powerup_triple.png'),shield:loadImage('assets/powerup_shield.png'),health:loadImage('assets/powerup_health.png'),companion:loadImage('assets/powerup_companion.png')},companionDrone:loadImage('assets/drone.png'),minion:loadImage('assets/Enemy.png'),backgrounds:[loadImage('assets/fondo1.png'),loadImage('assets/fondo2.png')]};
const sounds={shoot:new Audio('assets/hitHurt.wav'),explosion:new Audio('assets/explosion.wav')}; let currentBackground=null;
function playSound(sound){try{const audio=sound.cloneNode();audio.play()}catch(e){}}
const shipsData={'interceptor':{name:'Interceptor',firePattern:'single',baseDamage:10,baseSpeed:5,baseShootInterval:450,baseHealth:100,upgrades:{damage:2,firerate:-20}},'vanguard':{name:'Vanguard',firePattern:'spread',baseDamage:7,baseSpeed:4.5,baseShootInterval:500,baseHealth:75,upgrades:{damage:2,spread:0.05}},'striker':{name:'Striker',firePattern:'side',baseDamage:12,baseSpeed:4,baseShootInterval:480,baseHealth:100,upgrades:{mainDamage:3,sideDamage:2}}};
let player={},boss={}; const bosses=[{name:"GuardiÃ¡n",sprite:sprites.bosses[0],width:140,height:70,attackPattern:'burst',phaseTwoAttack:'stream'},{name:"Invasor",sprite:sprites.bosses[1],width:120,height:80,attackPattern:'spiral',phaseTwoAttack:'walls'},{name:"Depredador",sprite:sprites.bosses[2],width:150,height:60,attackPattern:'homing',phaseTwoAttack:'shotgun'}];
const PLAYER_PROGRESS_KEY='aceCraftPlayerProgress';
function getSanitizedPlayerProgress(){const d={currency:0,selectedShip:'interceptor',unlockedShips:['interceptor'],shipUpgrades:{'interceptor':{},'vanguard':{},'striker':{}}};let p;try{const s=localStorage.getItem(PLAYER_PROGRESS_KEY);p=s?JSON.parse(s):d;if(typeof p!=='object'||p===null)p=d}catch{p=d}p.currency=typeof p.currency==='number'?p.currency:0;p.unlockedShips=Array.isArray(p.unlockedShips)?p.unlockedShips:['interceptor'];p.shipUpgrades=p.shipUpgrades||{};for(const sId in shipsData)if(!p.shipUpgrades[sId])p.shipUpgrades[sId]={};if(!p.unlockedShips.includes(p.selectedShip))p.selectedShip='interceptor';return p}
function initializeMission(){const settings=JSON.parse(localStorage.getItem(GAME_SETTINGS_KEY))||{difficulty:1};difficultyMultiplier=settings.difficulty;coinMultiplier=difficultyMultiplier;const pData=getSanitizedPlayerProgress();const sId=pData.selectedShip;const sBase=shipsData[sId];const sUp=pData.shipUpgrades[sId]||{};sprites.player=sprites.playerShips[sId];const finalStats={...sBase};if(sId==='interceptor'){finalStats.damage=sBase.baseDamage+((sUp.damage||0)*sBase.upgrades.damage);finalStats.shootInterval=sBase.baseShootInterval+((sUp.firerate||0)*sBase.upgrades.firerate)}else if(sId==='vanguard'){finalStats.damage=sBase.baseDamage+((sUp.damage||0)*sBase.upgrades.damage);finalStats.spreadAngle=0.2+((sUp.spread||0)*sBase.upgrades.spread)}else if(sId==='striker'){finalStats.damage=sBase.baseDamage+((sUp.mainDamage||0)*sBase.upgrades.mainDamage);finalStats.sideDamage=4+((sUp.sideDamage||0)*sBase.upgrades.sideDamage)}finalStats.speed=sBase.baseSpeed;resetGame(finalStats)}
function resetGame(finalStats){isGameOver=false;score=0;currentPhaseIndex=0;activeControl='none';combo={count:0,multiplier:1,timer:0};player={x:canvas.width/2-25,y:canvas.height-100,health:finalStats.baseHealth,maxHealth:finalStats.baseHealth,lastShot:0,shieldExpiresAt:0,tripleShotExpiresAt:0,isFiringLaser:false,specialMeter:0,maxSpecial:100,size:50,...finalStats};player.hitboxWidth=player.size*0.6;player.hitboxHeight=player.size*0.8;companion=null;currentBackground=sprites.backgrounds[0]}
function setupPhase(){for(const key in entityArrays)if(key!=='playerBullets')entityArrays[key].length=0;const phaseData=missionData.phases[currentPhaseIndex];if(phaseData.bossIndex!==undefined){const bossIndex=phaseData.bossIndex;const bossData=bosses[bossIndex];boss={...bossData,x:canvas.width/2-bossData.width/2,y:50,lastShot:0,spiralAngle:0,isPhaseTwo:false};boss.health=(200+bossIndex*150)*difficultyMultiplier;boss.maxHealth=boss.health;boss.speed=(2+bossIndex*0.2)*difficultyMultiplier;boss.shootInterval=Math.max(150,(900-bossIndex*100)/difficultyMultiplier)}else{boss={health:0};phaseData.waves.forEach(wave=>{for(let i=0;i<wave.count;i++){const x=Math.random()*(canvas.width-40);const y=-40-Math.random()*200;entityArrays.minions.push(createMinion(wave.type,x,y,wave.pattern))}})}}
let lastTime=0; function gameLoop(ts){if(isGameOver)return;const dt=(ts-lastTime)/1000||0;lastTime=ts;if(!isPaused)update(dt);draw();requestAnimationFrame(gameLoop)}
function update(dt){updateStars();updatePlayerState(dt);updateCompanion();handleControls();autoShootPlayer();if(boss.health>0){if(!boss.isPhaseTwo&&boss.health<=boss.maxHealth/2)enterPhaseTwo();moveBoss();shootFromBoss()}updateMinionShooting();updateEntities();if(player.isFiringLaser)updateLaser();const isBossPhase=missionData.phases[currentPhaseIndex].bossIndex!==undefined;if((isBossPhase&&boss.health<=0&&boss.health>-1)||(!isBossPhase&&entityArrays.minions.length===0)){if(isBossPhase)boss.health=-1;if(currentPhaseIndex<4){isPaused=true;setTimeout(()=>{isPaused=false;currentPhaseIndex++;setupPhase()},2000)}else{missionComplete()}}}
function missionComplete(){isGameOver=true;const rank=calculateRank(score);const{totalCredits,rankBonus}=calculateRewards(rank);const pData=getSanitizedPlayerProgress();pData.currency+=totalCredits;localStorage.setItem(PLAYER_PROGRESS_KEY,JSON.stringify(pData));document.getElementById('results-score').textContent=Math.floor(score);document.getElementById('results-base-credits').textContent=missionData.baseCredits;document.getElementById('results-rank-bonus').textContent=`x${rankBonus}`;document.getElementById('results-difficulty-bonus').textContent=`x${coinMultiplier}`;document.getElementById('results-total-credits').textContent=totalCredits;const rankDisplay=document.getElementById('rank-display');rankDisplay.textContent=rank;rankDisplay.className=`rank-display rank-${rank}`;document.getElementById('mission-complete-modal').style.display='block'}
function calculateRank(finalScore){const thresholds=missionData.rankThresholds;if(finalScore>=thresholds.S)return'S';if(finalScore>=thresholds.A)return'A';if(finalScore>=thresholds.B)return'B';return'C'}
function calculateRewards(rank){let rankBonus=1;if(rank==='S')rankBonus=2;else if(rank==='A')rankBonus=1.5;else if(rank==='B')rankBonus=1.2;const totalCredits=Math.floor(missionData.baseCredits*rankBonus*coinMultiplier);return{totalCredits,rankBonus}}
document.getElementById('return-to-menu-btn').addEventListener('click',()=>{window.location.href='menu.html'});function gameOver(){isGameOver=true;document.getElementById('game-over-modal').style.display='block';setTimeout(()=>{window.location.href='menu.html'},3000)}
function resizeCanvas(){canvas.width=window.innerWidth;canvas.height=window.innerHeight}
function createStars(){for(let i=0;i<100;i++)stars.push({x:Math.random()*canvas.width,y:Math.random()*canvas.height,size:Math.random()*1.5+0.5,speed:Math.random()*0.5+0.25})}
function draw(){ctx.fillStyle="#000010";ctx.fillRect(0,0,canvas.width,canvas.height);if(currentBackground)ctx.drawImage(currentBackground,0,0,canvas.width,canvas.height);drawStars();if(!isPaused){drawPlayer();if(companion&&companion.active)drawCompanion();if(boss&&boss.health>0)drawBoss();drawProjectiles();drawMinions();drawExplosions();drawPowerUps();if(player.isFiringLaser)drawLaser();drawUI()}}
function updateStars(){stars.forEach(s=>{s.y+=s.speed;if(s.y>canvas.height){s.y=0;s.x=Math.random()*canvas.width}})}
function handleControls(){if(!player||typeof player.speed!=='number')return;if(activeControl==='mouse'){player.x=mousePos.x-player.size/2;player.y=mousePos.y-player.size/2}else if(activeControl==='keyboard'){if(direction==="up")player.y-=player.speed;if(direction==="down")player.y+=player.speed;if(direction==="left")player.x-=player.speed;if(direction==="right")player.x+=player.speed}player.x=Math.max(0,Math.min(canvas.width-player.size,player.x));player.y=Math.max(0,Math.min(canvas.height-player.size,player.y))}
function autoShootPlayer(){if(!player||typeof player.shootInterval!=='number'||player.isFiringLaser)return;if(Date.now()-player.lastShot>player.shootInterval){playSound(sounds.shoot);const cX=player.x+player.size/2;const tS=Date.now()<player.tripleShotExpiresAt;if(tS)for(let i=-1;i<=1;i++)entityArrays.playerBullets.push({x:cX,y:player.y,radius:6,speed:8,damage:player.damage,angle:0.2*i,active:true});else switch(player.firePattern){case'single':entityArrays.playerBullets.push({x:cX,y:player.y,radius:6,speed:8,damage:player.damage,angle:0,active:true});break;case'spread':for(let i=-1;i<=1;i++)entityArrays.playerBullets.push({x:cX,y:player.y,radius:5,speed:7,damage:player.damage,angle:player.spreadAngle*i,active:true});break;case'side':entityArrays.playerBullets.push({x:cX,y:player.y,radius:7,speed:8,damage:player.damage,angle:0,active:true});entityArrays.playerBullets.push({x:player.x,y:player.y+20,radius:4,speed:6,damage:player.sideDamage,isSide:true,direction:-1,active:true});entityArrays.playerBullets.push({x:player.x+player.size,y:player.y+20,radius:4,speed:6,damage:player.sideDamage,isSide:true,direction:1,active:true});break}player.lastShot=Date.now()}}
function checkPlayerDamage(t){if(!(Date.now()<player.shieldExpiresAt)){player.health-=t;if(player.health<=0&&!isGameOver)gameOver()}}
function increaseCombo(){combo.count++;combo.timer=3;combo.multiplier=1+Math.floor(combo.count/10)}
function updatePlayerState(dt){if(combo.timer>0){combo.timer-=dt;if(combo.timer<=0){combo.count=0;combo.multiplier=1}}}
function spawnPowerUp(t,e){const powerupTypes=['tripleShot','shield','health','companion'];const type=powerupTypes[Math.floor(Math.random()*powerupTypes.length)];const size=(type==='health')?64:(type==='companion'?40:30);entityArrays.powerUps.push({x:t,y:e,type:type,size:size,speed:2,active:true})}
function activatePowerUp(t){switch(t){case'tripleShot':player.tripleShotExpiresAt=Date.now()+10000;break;case'shield':player.shieldExpiresAt=Date.now()+8000;break;case'health':player.health=Math.min(player.maxHealth,player.health+25);break;case'companion':companion={x:player.x,y:player.y,size:40,expiresAt:Date.now()+15000,lastShot:0,shootInterval:600,damage:5,active:true};break}}
function increaseSpecialMeter(t){if(player.isFiringLaser)return;player.specialMeter=Math.min(player.maxSpecial,player.specialMeter+t);document.getElementById('special-meter-bar').style.width=`${(player.specialMeter/player.maxSpecial)*100}%`;if(player.specialMeter>=player.maxSpecial)document.getElementById('laserBtn').style.display='block'}
function fireLaser(){if(player.specialMeter>=player.maxSpecial&&!isGameOver&&!player.isFiringLaser){player.isFiringLaser=true;document.getElementById('laserBtn').style.display='none';setTimeout(()=>{player.isFiringLaser=false},3000)}}
function updateLaser(){player.specialMeter=Math.max(0,player.specialMeter-player.maxSpecial/180);document.getElementById('special-meter-bar').style.width=`${(player.specialMeter/player.maxSpecial)*100}%`;const t={x:player.x+player.size/2-5,y:0,width:10,height:player.y};entityArrays.minions.forEach(e=>{if(e.active&&t.x<e.x+e.size&&t.x+t.width>e.x)e.health-=2});if(boss.health>0&&t.x<boss.x+boss.width&&t.x+t.width>boss.x)boss.health-=2}
function updateCompanion(){if(!companion||!companion.active)return;if(Date.now()>companion.expiresAt){companion.active=false;companion=null;return}const tX=player.x-50,tY=player.y+20,lF=0.1;companion.x+=(tX-companion.x)*lF;companion.y+=(tY-companion.y)*lF;if(Date.now()-companion.lastShot>companion.shootInterval){playSound(sounds.shoot);entityArrays.companionBullets.push({x:companion.x+companion.size/2,y:companion.y,radius:4,speed:6,damage:companion.damage,active:true});companion.lastShot=Date.now()}}
function enterPhaseTwo(){boss.isPhaseTwo=true;boss.speed*=1.5;boss.shootInterval*=0.7}
function moveBoss(){if(!boss||boss.health<=0)return;let tX=player.x+player.size/2-boss.width/2;const d=tX-boss.x;if(Math.abs(d)>boss.speed)boss.x+=Math.sign(d)*boss.speed;boss.x=Math.max(0,Math.min(canvas.width-boss.width,boss.x))}
function updateMinionShooting(){entityArrays.minions.forEach(t=>{if(t.active&&Date.now()-t.lastShot>t.shootInterval){entityArrays.minionProjectiles.push({x:t.x+t.size/2,y:t.y+t.size,radius:5,speed:3*difficultyMultiplier,active:true});t.lastShot=Date.now()}})}
function shootFromBoss(){if(!boss||boss.health<=0||Date.now()-boss.lastShot<boss.shootInterval)return;boss.lastShot=Date.now();const cX=boss.x+boss.width/2,cY=boss.y+boss.height;let bS=4*difficultyMultiplier;const a=boss.isPhaseTwo?boss.phaseTwoAttack:boss.attackPattern;switch(a){case'burst':for(let r=-1;r<=1;r++){const s=Math.atan2(player.y-cY,player.x+player.size/2-cX)+0.25*r;entityArrays.bossProjectiles.push({x:cX,y:cY,radius:8,vx:Math.cos(s)*bS,vy:Math.sin(s)*bS,active:true})}break;case'spiral':for(let r=0;r<4;r++){const s=boss.spiralAngle+r*(Math.PI/2);entityArrays.bossProjectiles.push({x:cX,y:cY,radius:6,vx:Math.cos(s)*bS,vy:Math.sin(s)*bS,active:true})}boss.spiralAngle+=0.3;break;case'homing':const r=Math.atan2(player.y-cY,player.x+player.size/2-cX);entityArrays.bossProjectiles.push({x:cX,y:cY,radius:10,vx:Math.cos(r)*bS,vy:Math.sin(r)*bS,active:true,homing:true});break;default:break;}}
function createMinion(type,x,y,pattern){let m={x,y,type,pattern,active:true,lastShot:Date.now()+Math.random()*1000,entered:false};if(type==='fast')Object.assign(m,{size:25,health:8*difficultyMultiplier,speedX:4*difficultyMultiplier,shootInterval:2200});else if(type==='tank')Object.assign(m,{size:40,health:40*difficultyMultiplier,speedX:1*difficultyMultiplier,shootInterval:3500});else Object.assign(m,{size:30,health:15*difficultyMultiplier,speedX:2.5*difficultyMultiplier,shootInterval:3000});switch(pattern){case'horizontal':m.entryY=80+Math.random()*50;break;case'sine':Object.assign(m,{entryY:100+Math.random()*60,sineAmp:30+Math.random()*20,sineFreq:0.01+Math.random()*0.01});break;case'dive':m.diveSpeed=2+Math.random()*1.5;break;case'arc':Object.assign(m,{vx:(x<canvas.width/2?3:-3),vy:1.5,gravity:0.05});break}return m}
function updateMinionMovement(m){if(!m.entered){let tY=m.entryY||100;if(m.y<tY){m.y+=3;if(m.y>=tY){m.entered=true;if(m.pattern==='horizontal'&&m.x>canvas.width/2)m.speedX*=-1}}else m.entered=true}else switch(m.pattern){case'horizontal':m.x+=m.speedX;if(m.x<=0||m.x+m.size>=canvas.width)m.speedX*=-1;break;case'sine':m.x+=m.speedX;m.y=m.entryY+Math.sin(m.x*m.sineFreq)*m.sineAmp;if(m.x<=0||m.x+m.size>=canvas.width)m.speedX*=-1;break;case'dive':m.y+=m.diveSpeed;break;case'arc':m.x+=m.vx;m.y+=m.vy;m.vy+=m.gravity;break}if(m.y>canvas.height+m.size||m.x<-m.size*2||m.x>canvas.width+m.size*2)m.active=false}
function updateEntities(){function t(t,e){if(!t||!e)return false;let a=t.x,r=t.y;if(t.x<e.x)a=e.x;else if(t.x>e.x+(e.size||e.width))a=e.x+(e.size||e.width);if(t.y<e.y)r=e.y;else if(t.y>e.y+(e.size||e.height))r=e.y+(e.size||e.height);return Math.hypot(t.x-a,t.y-r)<=t.radius}const pHB={x:player.x+(player.size-player.hitboxWidth)/2,y:player.y+(player.size-player.hitboxHeight)/2,width:player.hitboxWidth,height:player.hitboxHeight};entityArrays.bossProjectiles.forEach(e=>{if(e.homing){const t=Math.atan2(player.y+player.size/2-e.y,player.x+player.size/2-e.x),a=4*difficultyMultiplier;e.vx=Math.cos(t)*a;e.vy=Math.sin(t)*a}e.x+=e.vx;e.y+=e.vy;if(player&&t(e,pHB)){checkPlayerDamage(10);e.active=false}if(e.y>canvas.height+20||e.x<-20||e.x>canvas.width+20)e.active=false});entityArrays.playerBullets.forEach(e=>{if(e.isSide){e.x+=e.speed*e.direction;e.y-=0.5}else{e.x+=Math.sin(e.angle)*e.speed;e.y-=Math.cos(e.angle)*e.speed}if(e.y<-20||e.y>canvas.height||e.x<-20||e.x>canvas.width+20)e.active=false;if(boss.health>0&&t(e,boss)){boss.health-=e.damage;e.active=false;increaseSpecialMeter(0.5);score+=10}});entityArrays.minionProjectiles.forEach(e=>{e.y+=e.speed;if(player&&t(e,pHB)){checkPlayerDamage(5);e.active=false}if(e.y>canvas.height)e.active=false});entityArrays.explosions.forEach(t=>{t.radius+=2;t.alpha-=0.05;if(t.alpha<=0)t.active=false});entityArrays.powerUps.forEach(t=>{t.y+=t.speed;if(player&&t.x<player.x+player.size&&t.x+t.size>player.x&&t.y<player.y+player.size&&t.y+t.size>player.y){activatePowerUp(t.type);t.active=false}if(t.y>canvas.height)t.active=false});entityArrays.minions.forEach(e=>{updateMinionMovement(e);entityArrays.playerBullets.forEach(a=>{if(a.active&&e.active&&t(a,e)){e.health-=a.damage;a.active=false;increaseSpecialMeter(1)}});if(e.health<=0&&e.active){e.active=false;score+=150*combo.multiplier;increaseCombo();if(Math.random()<0.15)spawnPowerUp(e.x,e.y)}});entityArrays.companionBullets.forEach(b=>{b.y-=b.speed;if(b.y<-10)b.active=false;entityArrays.minions.forEach(m=>{if(m.active&&t(b,m)){m.health-=b.damage;b.active=false}});if(boss.health>0&&t(b,boss)){boss.health-=b.damage;b.active=false}});for(const a in entityArrays)entityArrays[a]=entityArrays[a].filter(t=>t.active)}
function drawPlayer(){if(!player||isNaN(player.x))return;if(Date.now()<player.shieldExpiresAt){ctx.fillStyle="rgba(0,255,255,0.3)";ctx.beginPath();ctx.arc(player.x+player.size/2,player.y+player.size/2,player.size/1.5,0,2*Math.PI);ctx.fill()}if(sprites.player)ctx.drawImage(sprites.player,player.x,player.y,player.size,player.size);const t=player.size,e=6,a=player.health/player.maxHealth;if(isNaN(a))return;ctx.fillStyle="#333";ctx.fillRect(player.x,player.y-12,t,e);ctx.fillStyle="#00ff00";ctx.fillRect(player.x,player.y-12,t*a,e)}
function drawBoss(){if(!boss||isNaN(boss.x)||isNaN(boss.y))return;const pE=boss.isPhaseTwo&&Math.floor(Date.now()/200)%2===0;if(pE)ctx.filter='brightness(1.5)saturate(2)';if(boss.sprite)ctx.drawImage(boss.sprite,boss.x,boss.y,boss.width,boss.height);ctx.filter='none';const t=boss.width,e=8,a=boss.health/boss.maxHealth;if(isNaN(a))return;ctx.fillStyle="#333";ctx.fillRect(boss.x,boss.y-14,t,e);ctx.fillStyle="#ff0000";ctx.fillRect(boss.x,boss.y-14,t*a,e)}
function drawProjectiles(){entityArrays.bossProjectiles.forEach(t=>{ctx.fillStyle=t.homing?"orange":"#FF00FF";ctx.beginPath();ctx.arc(t.x,t.y,t.radius,0,2*Math.PI);ctx.fill()});ctx.fillStyle="cyan";entityArrays.playerBullets.forEach(t=>{ctx.beginPath();ctx.arc(t.x,t.y,t.radius,0,2*Math.PI);ctx.fill()});ctx.fillStyle="pink";entityArrays.minionProjectiles.forEach(t=>{ctx.beginPath();ctx.arc(t.x,t.y,t.radius,0,2*Math.PI);ctx.fill()});ctx.fillStyle="#FFA500";entityArrays.companionBullets.forEach(t=>{ctx.beginPath();ctx.arc(t.x,t.y,t.radius,0,2*Math.PI);ctx.fill()})}
function drawMinions(){entityArrays.minions.forEach(t=>{if(!t.active)return;if(sprites.minion)ctx.drawImage(sprites.minion,t.x,t.y,t.size,t.size);if(t.type==='tank'&&t.health>0){const e=t.size,a=t.health/t.maxHealth;ctx.fillStyle="#333";ctx.fillRect(t.x,t.y-8,e,4);ctx.fillStyle="red";ctx.fillRect(t.x,t.y-8,e*a,4)}})}
function drawExplosions(){entityArrays.explosions.forEach(t=>{ctx.fillStyle=`rgba(255,165,0,${t.alpha})`,ctx.beginPath(),ctx.arc(t.x,t.y,t.radius,0,2*Math.PI),ctx.fill()})}
function drawPowerUps(){entityArrays.powerUps.forEach(t=>{if(sprites.powerUps[t.type])ctx.drawImage(sprites.powerUps[t.type],t.x,t.y,t.size,t.size)})}
function drawCompanion(){if(!companion||isNaN(companion.x))return;if(sprites.companionDrone)ctx.drawImage(sprites.companionDrone,companion.x,companion.y,companion.size,companion.size)}
function drawLaser(){if(!player||isNaN(player.x))return;ctx.fillStyle="rgba(255,0,255,0.8)";ctx.fillRect(player.x+player.size/2-5,0,10,player.y);ctx.fillStyle="rgba(255,255,255,0.9)";ctx.fillRect(player.x+player.size/2-2,0,4,player.y)}
function drawStars(){ctx.fillStyle="white";stars.forEach(t=>{ctx.fillRect(t.x,t.y,t.size,t.size)})}
function drawTimerCircle(t,e,a,r,s,i,o){const n=(r/s)*2*Math.PI;ctx.beginPath();ctx.arc(t,e,a,0,2*Math.PI);ctx.strokeStyle="rgba(255,255,255,0.3)";ctx.lineWidth=2;ctx.stroke();ctx.beginPath();ctx.moveTo(t,e);ctx.arc(t,e,a,-Math.PI/2,-Math.PI/2+n);ctx.closePath();ctx.fillStyle=o;ctx.fill();if(i){const r=1.2*a;ctx.drawImage(i,t-r/2,e-r/2,r,r)}}
function drawUI(){ctx.fillStyle="white";ctx.font="18px 'Segoe UI'";ctx.textAlign="left";ctx.textBaseline="alphabetic";ctx.fillText(`PuntuaciÃ³n: ${Math.floor(score)}`,10,25);ctx.fillText(`Fase: ${currentPhaseIndex+1} / 5`,10,50);const remaining=entityArrays.minions.filter(m=>m.active).length;if(boss.health<=0&&currentPhaseIndex<4)ctx.fillText(`Enemigos: ${remaining}`,10,75);let t=110;const e=Date.now();if(e<player.shieldExpiresAt&&sprites.powerUps.shield){drawTimerCircle(30,t,15,player.shieldExpiresAt-e,8000,sprites.powerUps.shield,"rgba(0,255,255,0.7)");t+=45}if(e<player.tripleShotExpiresAt&&sprites.powerUps.tripleShot){drawTimerCircle(30,t,15,player.tripleShotExpiresAt-e,10000,sprites.powerUps.tripleShot,"rgba(255,165,0,0.7)");t+=45}if(companion&&companion.active&&sprites.powerUps.companion){drawTimerCircle(30,t,15,companion.expiresAt-e,15000,sprites.powerUps.companion,"rgba(173,216,230,0.7)");t+=45}if(combo.count>0){ctx.font="22px Arial";ctx.textAlign="center";ctx.fillStyle="rgba(255,255,255,0.5)";ctx.fillText(`${combo.count} COMBO`,canvas.width/2,canvas.height-60);ctx.font="bold 26px Arial";ctx.fillStyle="rgba(255,255,255,0.7)";ctx.fillText(`x${combo.multiplier}`,canvas.width/2,canvas.height-30)}}
window.addEventListener('resize',resizeCanvas);let direction=null;const mousePos={x:0,y:0};
canvas.addEventListener('mousemove',e=>{activeControl='mouse';mousePos.x=e.clientX;mousePos.y=e.clientY});
window.addEventListener("keydown",e=>{const k=e.key.toLowerCase();if(["w","s","a","d","arrowup","arrowdown","arrowleft","arrowright"].includes(k))activeControl='keyboard';switch(k){case"w":case"arrowup":direction="up";break;case"s":case"arrowdown":direction="down";break;case"a":case"arrowleft":direction="left";break;case"d":case"arrowright":direction="right";break;case" ":e.preventDefault();fireLaser();break}});
window.addEventListener("keyup",e=>{const k=e.key.toLowerCase();switch(k){case"w":case"arrowup":if(direction==="up")direction=null;break;case"s":case"arrowdown":if(direction==="down")direction=null;break;case"a":case"arrowleft":if(direction==="left")direction=null;break;case"d":case"arrowright":if(direction==="right")direction=null;break}});
document.getElementById('lore-title').textContent = missionData.title;
document.getElementById('lore-text').textContent = missionData.lore;
document.getElementById('start-mission-btn').addEventListener('click', () => {
    document.getElementById('lore-modal').style.display = 'none';
    document.getElementById('special-meter-container').style.display = 'block';
    isPaused = false;
    initializeMission();
});
resizeCanvas(); createStars(); gameLoop();