// ****** ZONA PARA PERSONALIZAR LA MISIÓN 1 ******
const missionData = {
    isInfinite: false,
    title: "Misión 1: El Silencio Roto",
    lore: "Durante ciclos hemos observado el silencio del Sector Alpha, un antiguo cementerio de naves. Hoy, ese silencio se ha roto. Ecos de energía desconocida resuenan en nuestros sensores, formando patrones de ataque básicos pero deliberados. Eres la punta de lanza de nuestra flota, el primero en enfrentar a este nuevo adversario. Tu objetivo: entrar, limpiar la avanzadilla y enfrentarte a su líder, una unidad pesada que llaman 'El Guardián'. Demuestra que la humanidad no se acobardará. Buena suerte, piloto.",
    rankThresholds: { S: 40000, A: 25000, B: 15000 },
    baseCredits: 100,
    phases: [
        { waves: [{ type: 'standard', pattern: 'horizontal', count: 5 }] },
        { waves: [{ type: 'standard', pattern: 'sine', count: 7 }] },
        { waves: [{ type: 'fast', pattern: 'horizontal', count: 4 }] },
        { waves: [{ type: 'standard', pattern: 'arc', count: 6 }, { type: 'tank', pattern: 'horizontal', count: 1 }] },
        { bossIndex: 0 } // Jefe: Guardián
    ]
};
// ****** FIN DE LA ZONA DE PERSONALIZACIÓN ******

// =============================================================
//          MOTOR DEL JUEGO (CÓDIGO CORRECTO)
// =============================================================
const canvas=document.getElementById("gameCanvas"),ctx=canvas.getContext("2d"),GAME_SETTINGS_KEY="aceCraftGameSettings",CAMPAIGN_HIGH_SCORES_KEY="aceCraftCampaignHighScores",INFINITE_HIGH_SCORES_KEY="aceCraftInfiniteHighScores";let score=0,isPaused=!0,isGameOver=!1,difficultyMultiplier=1,coinMultiplier=1,activeControl="none",currentPhaseIndex=0,level=1,stars=[],combo={count:0,multiplier:1,timer:0},entityArrays={bossProjectiles:[],playerBullets:[],explosions:[],minions:[],powerUps:[],minionProjectiles:[],companionBullets:[]},companion=null;function loadImage(e){const t=new Image;return t.src=e,t}const sprites={playerShips:{interceptor:loadImage("assets/nave.png"),vanguard:loadImage("assets/nave2.png"),striker:loadImage("assets/nave3.png")},player:null,bosses:[loadImage("assets/Boss1.png"),loadImage("assets/Boss2.png"),loadImage("assets/Boss3.png")],powerUps:{tripleShot:loadImage("assets/powerup_triple.png"),shield:loadImage("assets/powerup_shield.png"),health:loadImage("assets/powerup_health.png"),companion:loadImage("assets/powerup_companion.png")},companionDrone:loadImage("assets/drone.png"),minion:loadImage("assets/Enemy.png"),backgrounds:[loadImage("assets/fondo1.png"),loadImage("assets/fondo2.png")]},sounds={shoot:new Audio("assets/hitHurt.wav"),explosion:new Audio("assets/explosion.wav")};let currentBackground=null;function playSound(e){try{e.cloneNode().play()}catch(e){}}const shipsData={interceptor:{name:"Interceptor",firePattern:"single",baseDamage:10,baseSpeed:5,baseShootInterval:450,baseHealth:100,upgrades:{damage:2,firerate:-20}},vanguard:{name:"Vanguard",firePattern:"spread",baseDamage:7,baseSpeed:4.5,baseShootInterval:500,baseHealth:75,upgrades:{damage:2,spread:.05}},striker:{name:"Striker",firePattern:"side",baseDamage:12,baseSpeed:4,baseShootInterval:480,baseHealth:100,upgrades:{mainDamage:3,sideDamage:2}}};let player={},boss={};const bosses=[{name:"Guardián",sprite:sprites.bosses[0],width:140,height:70,attackPattern:"burst",phaseTwoAttack:"stream"},{name:"Invasor",sprite:sprites.bosses[1],width:120,height:80,attackPattern:"spiral",phaseTwoAttack:"walls"},{name:"Depredador",sprite:sprites.bosses[2],width:150,height:60,attackPattern:"homing",phaseTwoAttack:"shotgun"}],PLAYER_PROGRESS_KEY="aceCraftPlayerProgress";
function getSanitizedPlayerProgress(){const e={currency:0,selectedShip:"interceptor",unlockedShips:["interceptor"],shipUpgrades:{interceptor:{},vanguard:{},striker:{}}};let t;try{const a=localStorage.getItem(PLAYER_PROGRESS_KEY);t=a?JSON.parse(a):e,"object"!=typeof t||null===t?t=e:void 0}catch(e){t=e}return t.currency="number"==typeof t.currency?t.currency:0,t.unlockedShips=Array.isArray(t.unlockedShips)?t.unlockedShips:["interceptor"],t.shipUpgrades=t.shipUpgrades||{},Object.keys(shipsData).forEach(e=>{t.shipUpgrades[e]||(t.shipUpgrades[e]={})}),t.unlockedShips.includes(t.selectedShip)||(t.selectedShip="interceptor"),t}
function initializeGame(){const e=JSON.parse(localStorage.getItem(GAME_SETTINGS_KEY))||{difficulty:1};difficultyMultiplier=e.difficulty,coinMultiplier=difficultyMultiplier;const t=getSanitizedPlayerProgress(),a=t.selectedShip,i=shipsData[a],s=t.shipUpgrades[a]||{};sprites.player=sprites.playerShips[a];const n={...i};"interceptor"===a?(n.damage=i.baseDamage+(s.damage||0)*i.upgrades.damage,n.shootInterval=i.baseShootInterval+(s.firerate||0)*i.upgrades.firerate):"vanguard"===a?(n.damage=i.baseDamage+(s.damage||0)*i.upgrades.damage,n.spreadAngle=.2+(s.spread||0)*i.upgrades.spread):"striker"===a&&(n.damage=i.baseDamage+(s.mainDamage||0)*i.upgrades.mainDamage,n.sideDamage=4+(s.sideDamage||0)*i.upgrades.sideDamage),n.speed=i.baseSpeed,resetGame(n)}
function resetGame(e){isGameOver=!1,score=0,currentPhaseIndex=0,level=1,activeControl="none",combo={count:0,multiplier:1,timer:0},player={x:canvas.width/2-25,y:canvas.height-100,health:e.baseHealth,maxHealth:e.baseHealth,lastShot:0,shieldExpiresAt:0,tripleShotExpiresAt:0,isFiringLaser:!1,specialMeter:0,maxSpecial:100,size:50,...e},player.hitboxWidth=.6*player.size,player.hitboxHeight=.8*player.size,companion=null,currentBackground=sprites.backgrounds[0],setupPhase()}
function setupPhase(){let e;Object.keys(entityArrays).forEach(e=>{"playerBullets"!==e&&(entityArrays[e].length=0)}),missionData.isInfinite?e=level%5==0?{bossIndex:(level/5-1)%bosses.length}:{waves:[{type:"standard",pattern:"sine",count:4+level},{type:"fast",pattern:"arc",count:2+Math.floor(level/2)}]}:e=missionData.phases[currentPhaseIndex],void 0!==e.bossIndex?(boss={...(bosses[e.bossIndex]),x:canvas.width/2-bosses[e.bossIndex].width/2,y:50,lastShot:0,spiralAngle:0,isPhaseTwo:!1},boss.health=(200+150*e.bossIndex)*difficultyMultiplier,boss.maxHealth=boss.health,boss.speed=(2+.2*e.bossIndex)*difficultyMultiplier,boss.shootInterval=Math.max(150,(900-100*e.bossIndex)/difficultyMultiplier)):(boss={health:0},e.waves.forEach(e=>{for(let t=0;t<e.count;t++){const a=.9*canvas.width*Math.random()+ .05*canvas.width,i=-40-200*Math.random();entityArrays.minions.push(createMinion(e.type,a,i,e.pattern))}}))}
let lastTime=0;function gameLoop(e){if(isGameOver)return;const t=(e-lastTime)/1e3||0;lastTime=e,isPaused||update(t),draw(),requestAnimationFrame(gameLoop)}
function update(e){updateStars(),updatePlayerState(e),updateCompanion(),handleControls(),autoShootPlayer(),boss.health>0&&(boss.isPhaseTwo||boss.health>boss.maxHealth/2||enterPhaseTwo(),moveBoss(),shootFromBoss()),updateMinionShooting(),updateEntities(),player.isFiringLaser&&updateLaser();const t=missionData.isInfinite?level%5==0:void 0!==missionData.phases[currentPhaseIndex].bossIndex;if((t&&boss.health<=0&&boss.health>-1||!t&&0===entityArrays.minions.length)&&!isGameOver){if(t&&(boss.health=-1),missionData.isInfinite)isPaused=!0,setTimeout(()=>{isPaused=!1,level++,setupPhase()},2e3);else if(currentPhaseIndex<4)isPaused=!0,setTimeout(()=>{isPaused=!1,currentPhaseIndex++,setupPhase()},2e3);else missionComplete()}}
function missionComplete(){isGameOver=!0;const e=Math.floor(score*difficultyMultiplier),t=prompt("¡Misión Cumplida! Ingresa tu nombre para el récord:","PILOTO")||"PILOTO",a=calculateRank(e),{totalCredits:i,rankBonus:s}=calculateRewards(a),n=getSanitizedPlayerProgress();n.currency+=i,localStorage.setItem(PLAYER_PROGRESS_KEY,JSON.stringify(n));const r=JSON.parse(localStorage.getItem(CAMPAIGN_HIGH_SCORES_KEY))||[];r.push({name:t,score:e}),r.sort((e,t)=>t.score-e.score),r.splice(5),localStorage.setItem(CAMPAIGN_HIGH_SCORES_KEY,JSON.stringify(r)),document.getElementById("results-score").textContent=e,document.getElementById("results-base-credits").textContent=missionData.baseCredits,document.getElementById("results-rank-bonus").textContent=`x${s}`,document.getElementById("results-difficulty-bonus").textContent=`x${coinMultiplier}`,document.getElementById("results-total-credits").textContent=i;const l=document.getElementById("rank-display");l.textContent=a,l.className=`rank-display rank-${a}`,document.getElementById("mission-complete-modal").style.display="block"}
function calculateRank(e){const t=missionData.rankThresholds;return e>=t.S?"S":e>=t.A?"A":e>=t.B?"B":"C"}
function calculateRewards(e){let t=1;"S"===e?t=2:"A"===e?t=1.5:"B"===e&&(t=1.2);const a=Math.floor(missionData.baseCredits*t*coinMultiplier);return{totalCredits:a,rankBonus:t}}
document.getElementById("return-to-menu-btn")?.addEventListener("click",()=>{window.location.href="menu.html"}),document.getElementById("start-mission-btn").addEventListener("click",()=>{document.getElementById("lore-modal").style.display="none",document.getElementById("special-meter-container").style.display="block",isPaused=!1,initializeGame()});function gameOver(e){isGameOver=!0;if(missionData.isInfinite){const t=getSanitizedPlayerProgress();t.currency+=Math.floor(e||0),localStorage.setItem(PLAYER_PROGRESS_KEY,JSON.stringify(t));const a=JSON.parse(localStorage.getItem(INFINITE_HIGH_SCORES_KEY))||[],i=prompt("Fin de la Partida. Ingresa tu nombre:","PILOTO")||"PILOTO";a.push({name:i,score:Math.floor(score)}),a.sort((e,t)=>t.score-e.score),a.splice(5),localStorage.setItem(INFINITE_HIGH_SCORES_KEY,JSON.stringify(a))}document.getElementById("game-over-modal").style.display="block",setTimeout(()=>{window.location.href="menu.html"},4e3)}
function resizeCanvas(){canvas.width=window.innerWidth,canvas.height=window.innerHeight}
function createStars(){stars=[];for(let e=0;e<100;e++)stars.push({x:Math.random()*canvas.width,y:Math.random()*canvas.height,size:1.5*Math.random()+.5,speed:.5*Math.random()+.25})}
function draw(){ctx.fillStyle="#000010",ctx.fillRect(0,0,canvas.width,canvas.height),currentBackground&&ctx.drawImage(currentBackground,0,0,canvas.width,canvas.height),drawStars(),isPaused||(drawPlayer(),companion&&companion.active&&drawCompanion(),boss&&boss.health>0&&drawBoss(),drawProjectiles(),drawMinions(),drawExplosions(),drawPowerUps(),player.isFiringLaser&&drawLaser(),drawUI())}
function updateStars(){stars.forEach(e=>{e.y+=e.speed,e.y>canvas.height&&(e.y=0,e.x=Math.random()*canvas.width)})}
function handleControls(){if(!player||"number"!=typeof player.speed)return;"mouse"===activeControl?(player.x=mousePos.x-player.size/2,player.y=mousePos.y-player.size/2):"keyboard"===activeControl&&("up"===direction?player.y-=player.speed:"down"===direction?player.y+=player.speed:"left"===direction?player.x-=player.speed:"right"===direction&&(player.x+=player.speed)),player.x=Math.max(0,Math.min(canvas.width-player.size,player.x)),player.y=Math.max(0,Math.min(canvas.height-player.size,player.y))}
function autoShootPlayer(){if(player&&"number"==typeof player.shootInterval&&!player.isFiringLaser&&Date.now()-player.lastShot>player.shootInterval){playSound(sounds.shoot);const e=player.x+player.size/2;if(Date.now()<player.tripleShotExpiresAt)for(let t=-1;t<=1;t++)entityArrays.playerBullets.push({x:e,y:player.y,radius:6,speed:8,damage:player.damage,angle:.2*t,active:!0});else switch(player.firePattern){case"single":entityArrays.playerBullets.push({x:e,y:player.y,radius:6,speed:8,damage:player.damage,angle:0,active:!0});break;case"spread":for(let t=-1;t<=1;t++)entityArrays.playerBullets.push({x:e,y:player.y,radius:5,speed:7,damage:player.damage,angle:player.spreadAngle*t,active:!0});break;case"side":entityArrays.playerBullets.push({x:e,y:player.y,radius:7,speed:8,damage:player.damage,angle:0,active:!0}),entityArrays.playerBullets.push({x:player.x,y:player.y+20,radius:4,speed:6,damage:player.sideDamage,isSide:!0,direction:-1,active:!0}),entityArrays.playerBullets.push({x:player.x+player.size,y:player.y+20,radius:4,speed:6,damage:player.sideDamage,isSide:!0,direction:1,active:!0})}player.lastShot=Date.now()}}
function checkPlayerDamage(e){if(!(Date.now()<player.shieldExpiresAt)&&(player.health-=e,player.health<=0&&!isGameOver))if(missionData.isInfinite){let e=Math.floor(score/100);gameOver(e)}else gameOver(0)}
function increaseCombo(){combo.count++,combo.timer=3,combo.multiplier=1+Math.floor(combo.count/10)}
function updatePlayerState(e){combo.timer>0&&(combo.timer-=e,combo.timer<=0&&(combo.count=0,combo.multiplier=1))}
function spawnPowerUp(e,t){const a=["tripleShot","shield","health","companion"],i=a[Math.floor(Math.random()*a.length)];entityArrays.powerUps.push({x:e,y:t,type:i,size:"health"===i?64:"companion"===i?40:30,speed:2,active:!0})}
function activatePowerUp(e){switch(e){case"tripleShot":player.tripleShotExpiresAt=Date.now()+1e4;break;case"shield":player.shieldExpiresAt=Date.now()+8e3;break;case"health":player.health=Math.min(player.maxHealth,player.health+25);break;case"companion":companion={x:player.x,y:player.y,size:40,expiresAt:Date.now()+15e3,lastShot:0,shootInterval:600,damage:5,active:!0}}}
function increaseSpecialMeter(e){if(player.isFiringLaser)return;player.specialMeter=Math.min(player.maxSpecial,player.specialMeter+e),document.getElementById("special-meter-bar").style.width=`${player.specialMeter/player.maxSpecial*100}%`,player.specialMeter>=player.maxSpecial&&(document.getElementById("laserBtn").style.display="block")}
function fireLaser(){player.specialMeter>=player.maxSpecial&&!isGameOver&&!player.isFiringLaser&&(player.isFiringLaser=!0,document.getElementById("laserBtn").style.display="none",setTimeout(()=>{player.isFiringLaser=!1},3e3))}
function updateLaser(){player.specialMeter=Math.max(0,player.specialMeter-player.maxSpecial/180),document.getElementById("special-meter-bar").style.width=`${player.specialMeter/player.maxSpecial*100}%`;const e={x:player.x+player.size/2-5,y:0,width:10,height:player.y};entityArrays.minions.forEach(t=>{t.active&&e.x<t.x+t.size&&e.x+e.width>t.x&&(t.health-=2)}),boss.health>0&&e.x<boss.x+boss.width&&e.x+e.width>boss.x&&(boss.health-=2)}
function updateCompanion(){if(!companion||!companion.active)return;if(Date.now()>companion.expiresAt)return companion.active=!1,void(companion=null);const e=player.x-50,t=player.y+20;companion.x+=.1*(e-companion.x),companion.y+=.1*(t-companion.y),Date.now()-companion.lastShot>companion.shootInterval&&(playSound(sounds.shoot),entityArrays.companionBullets.push({x:companion.x+companion.size/2,y:companion.y,radius:4,speed:6,damage:companion.damage,active:!0}),companion.lastShot=Date.now())}
function enterPhaseTwo(){boss.isPhaseTwo=!0,boss.speed*=1.5,boss.shootInterval*=.7}
function moveBoss(){if(!boss||boss.health<=0)return;let e=player.x+player.size/2-boss.width/2;const t=e-boss.x;Math.abs(t)>boss.speed&&(boss.x+=Math.sign(t)*boss.speed),boss.x=Math.max(0,Math.min(canvas.width-boss.width,boss.x))}
function updateMinionShooting(){entityArrays.minions.forEach(e=>{e.active&&Date.now()-e.lastShot>e.shootInterval&&(entityArrays.minionProjectiles.push({x:e.x+e.size/2,y:e.y+e.size,radius:5,speed:3*difficultyMultiplier,active:!0}),e.lastShot=Date.now())})}
function shootFromBoss(){if(!boss||boss.health<=0||Date.now()-boss.lastShot<boss.shootInterval)return;boss.lastShot=Date.now();const e=boss.x+boss.width/2,t=boss.y+boss.height,a=4*difficultyMultiplier,i=boss.isPhaseTwo?boss.phaseTwoAttack:boss.attackPattern;switch(i){case"burst":for(let i=-1;i<=1;i++){const s=Math.atan2(player.y-t,player.x+player.size/2-e)+.25*i;entityArrays.bossProjectiles.push({x:e,y:t,radius:8,vx:Math.cos(s)*a,vy:Math.sin(s)*a,active:!0})}break;case"spiral":for(let i=0;i<4;i++){const s=boss.spiralAngle+i*(Math.PI/2);entityArrays.bossProjectiles.push({x:e,y:t,radius:6,vx:Math.cos(s)*a,vy:Math.sin(s)*a,active:!0})}boss.spiralAngle+=.3;break;case"homing":{const i=Math.atan2(player.y-t,player.x+player.size/2-e);entityArrays.bossProjectiles.push({x:e,y:t,radius:10,vx:Math.cos(i)*a,vy:Math.sin(i)*a,active:!0,homing:!0})}break;}}
function createMinion(e,t,a,i){let s={x:t,y:a,type:e,pattern:i,active:!0,lastShot:Date.now()+1e3*Math.random(),entered:!1};switch("fast"===e?Object.assign(s,{size:25,health:8*difficultyMultiplier,speedX:4*difficultyMultiplier,shootInterval:2200}):"tank"===e?(s.health=40*difficultyMultiplier,s.maxHealth=s.health,Object.assign(s,{size:40,speedX:1*difficultyMultiplier,shootInterval:3500})):Object.assign(s,{size:30,health:15*difficultyMultiplier,speedX:2.5*difficultyMultiplier,shootInterval:3e3}),i){case"horizontal":s.entryY=80+50*Math.random();break;case"sine":Object.assign(s,{entryY:100+60*Math.random(),sineAmp:30+20*Math.random(),sineFreq:.01+.01*Math.random()});break;case"arc":Object.assign(s,{vx:t<canvas.width/2?3:-3,vy:1.5,gravity:.05})}return s}
function updateMinionMovement(e){if(e.entered)switch(e.pattern){case"horizontal":e.x+=e.speedX,(e.x<=0||e.x+e.size>=canvas.width)&&(e.speedX*=-1);break;case"sine":e.x+=e.speedX,e.y=e.entryY+Math.sin(e.x*e.sineFreq)*e.sineAmp,(e.x<=0||e.x+e.size>=canvas.width)&&(e.speedX*=-1);break;case"arc":e.x+=e.vx,e.y+=e.vy,e.vy+=e.gravity}else{let t=e.entryY||100;e.y<t?(e.y+=3,e.y>=t&&(e.entered=!0,"horizontal"===e.pattern&&e.x>canvas.width/2&&(e.speedX*=-1))):e.entered=!0}e.y>canvas.height+e.size||e.x<-2*e.size||e.x>canvas.width+2*e.size?e.active=!1:void 0}
function updateEntities(){function e(e,t){if(!e||!t)return!1;let a=e.x,i=e.y;return e.x<t.x?a=t.x:e.x>t.x+(t.size||t.width)&&(a=t.x+(t.size||t.width)),e.y<t.y?i=t.y:e.y>t.y+(t.size||t.height)&&(i=t.y+(t.size||t.height)),Math.hypot(e.x-a,e.y-i)<=e.radius}const t={x:player.x+(player.size-player.hitboxWidth)/2,y:player.y+(player.size-player.hitboxHeight)/2,width:player.hitboxWidth,height:player.hitboxHeight};entityArrays.bossProjectiles.forEach(a=>{a.homing&&(i=Math.atan2(player.y+player.size/2-a.y,player.x+player.size/2-a.x),s=4*difficultyMultiplier,a.vx=Math.cos(i)*s,a.vy=Math.sin(i)*s);var i,s;a.x+=a.vx,a.y+=a.vy,player&&e(a,t)&&(checkPlayerDamage(10),a.active=!1),a.y>canvas.height+20||a.x<-20||a.x>canvas.width+20?a.active=!1:void 0}),entityArrays.playerBullets.forEach(t=>{"isSide"in t?(t.x+=t.speed*t.direction,t.y-=.5):(t.x+=Math.sin(t.angle)*t.speed,t.y-=Math.cos(t.angle)*t.speed),t.y<-20||t.y>canvas.height||t.x<-20||t.x>canvas.width+20?t.active=!1:void 0,boss.health>0&&e(t,boss)&&(boss.health-=t.damage,t.active=!1,increaseSpecialMeter(.5),score+=10)}),entityArrays.minionProjectiles.forEach(a=>{a.y+=a.speed,player&&e(a,t)&&(checkPlayerDamage(5),a.active=!1),a.y>canvas.height&&(a.active=!1)}),entityArrays.explosions.forEach(e=>{e.radius+=2,e.alpha-=.05,e.alpha<=0&&(e.active=!1)}),entityArrays.powerUps.forEach(e=>{e.y+=e.speed,player&&e.x<player.x+player.size&&e.x+e.size>player.x&&e.y<player.y+player.size&&e.y+e.size>player.y&&(activatePowerUp(e.type),e.active=!1),e.y>canvas.height&&(e.active=!1)}),entityArrays.minions.forEach(t=>{updateMinionMovement(t),entityArrays.playerBullets.forEach(a=>{a.active&&t.active&&e(a,t)&&(t.health-=a.damage,a.active=!1,increaseSpecialMeter(1))}),t.health<=0&&t.active&&(t.active=!1,score+=150*combo.multiplier,increaseCombo(),Math.random()<.15&&spawnPowerUp(t.x,t.y))}),entityArrays.companionBullets.forEach(t=>{t.y-=t.speed,t.y<-10?t.active=!1:void 0,entityArrays.minions.forEach(a=>{a.active&&e(t,a)&&(a.health-=t.damage,t.active=!1)}),boss.health>0&&e(t,boss)&&(boss.health-=t.damage,t.active=!1)}),Object.keys(entityArrays).forEach(e=>{entityArrays[e]=entityArrays[e].filter(e=>e.active)})}
function drawPlayer(){if(!player||isNaN(player.x))return;Date.now()<player.shieldExpiresAt&&(ctx.fillStyle="rgba(0,255,255,0.3)",ctx.beginPath(),ctx.arc(player.x+player.size/2,player.y+player.size/2,player.size/1.5,0,2*Math.PI),ctx.fill()),sprites.player&&ctx.drawImage(sprites.player,player.x,player.y,player.size,player.size);const e=player.size,t=6,a=player.health/player.maxHealth;if(isNaN(a))return;ctx.fillStyle="#333",ctx.fillRect(player.x,player.y-12,e,t),ctx.fillStyle="#00ff00",ctx.fillRect(player.x,player.y-12,e*a,t)}
function drawBoss(){if(!boss||isNaN(boss.x)||isNaN(boss.y))return;const e=boss.isPhaseTwo&&Math.floor(Date.now()/200)%2==0;e&&(ctx.filter="brightness(1.5) saturate(2)"),boss.sprite&&ctx.drawImage(boss.sprite,boss.x,boss.y,boss.width,boss.height),ctx.filter="none";const t=boss.width,a=8,i=boss.health/boss.maxHealth;if(isNaN(i))return;ctx.fillStyle="#333",ctx.fillRect(boss.x,boss.y-14,t,a),ctx.fillStyle="#ff0000",ctx.fillRect(boss.x,boss.y-14,t*i,a)}
function drawProjectiles(){entityArrays.bossProjectiles.forEach(e=>{ctx.fillStyle=e.homing?"orange":"#FF00FF",ctx.beginPath(),ctx.arc(e.x,e.y,e.radius,0,2*Math.PI),ctx.fill()}),ctx.fillStyle="cyan",entityArrays.playerBullets.forEach(e=>{ctx.beginPath(),ctx.arc(e.x,e.y,e.radius,0,2*Math.PI),ctx.fill()}),ctx.fillStyle="pink",entityArrays.minionProjectiles.forEach(e=>{ctx.beginPath(),ctx.arc(e.x,e.y,e.radius,0,2*Math.PI),ctx.fill()}),ctx.fillStyle="#FFA500",entityArrays.companionBullets.forEach(e=>{ctx.beginPath(),ctx.arc(e.x,e.y,e.radius,0,2*Math.PI),ctx.fill()})}
function drawMinions(){entityArrays.minions.forEach(e=>{if(e.active&&(sprites.minion&&ctx.drawImage(sprites.minion,e.x,e.y,e.size,e.size),"tank"===e.type&&e.health>0&&e.maxHealth)){const t=e.size,a=e.health/e.maxHealth;ctx.fillStyle="#333",ctx.fillRect(e.x,e.y-8,t,4),ctx.fillStyle="red",ctx.fillRect(e.x,e.y-8,t*a,4)}})}
function drawExplosions(){entityArrays.explosions.forEach(e=>{ctx.fillStyle=`rgba(255,165,0,${e.alpha})`,ctx.beginPath(),ctx.arc(e.x,e.y,e.radius,0,2*Math.PI),ctx.fill()})}
function drawPowerUps(){entityArrays.powerUps.forEach(e=>{sprites.powerUps[e.type]&&ctx.drawImage(sprites.powerUps[e.type],e.x,e.y,e.size,e.size)})}
function drawCompanion(){companion&&!isNaN(companion.x)&&sprites.companionDrone&&ctx.drawImage(sprites.companionDrone,companion.x,companion.y,companion.size,companion.size)}
function drawLaser(){player&&!isNaN(player.x)&&(ctx.fillStyle="rgba(255,0,255,0.8)",ctx.fillRect(player.x+player.size/2-5,0,10,player.y),ctx.fillStyle="rgba(255,255,255,0.9)",ctx.fillRect(player.x+player.size/2-2,0,4,player.y))}
function drawStars(){ctx.fillStyle="white",stars.forEach(e=>{ctx.fillRect(e.x,e.y,e.size,e.size)})}
function drawTimerCircle(e,t,a,i,s,n,r){const l=(i/s)*2*Math.PI;ctx.beginPath(),ctx.arc(e,t,a,0,2*Math.PI),ctx.strokeStyle="rgba(255,255,255,0.3)",ctx.lineWidth=2,ctx.stroke(),ctx.beginPath(),ctx.moveTo(e,t),ctx.arc(e,t,a,-Math.PI/2,-Math.PI/2+l),ctx.closePath(),ctx.fillStyle=r,ctx.fill();if(n){const i=1.2*a;ctx.drawImage(n,e-i/2,t-i/2,i,i)}}
function drawUI(){ctx.fillStyle="white",ctx.font="18px 'Segoe UI'",ctx.textAlign="left",ctx.textBaseline="alphabetic",ctx.fillText(`Puntuación: ${Math.floor(score)}`,10,25),ctx.fillText(missionData.isInfinite?`Nivel: ${level}`:`Fase: ${currentPhaseIndex+1} / 5`,10,50);let e=110;const t=Date.now();t<player.shieldExpiresAt&&sprites.powerUps.shield&&(drawTimerCircle(30,e,15,player.shieldExpiresAt-t,8e3,sprites.powerUps.shield,"rgba(0,255,255,0.7)"),e+=45),t<player.tripleShotExpiresAt&&sprites.powerUps.tripleShot&&(drawTimerCircle(30,e,15,player.tripleShotExpiresAt-t,1e4,sprites.powerUps.tripleShot,"rgba(255,165,0,0.7)"),e+=45),companion&&companion.active&&sprites.powerUps.companion&&(drawTimerCircle(30,e,15,companion.expiresAt-t,15e3,sprites.powerUps.companion,"rgba(173,216,230,0.7)"),e+=45),combo.count>0&&(ctx.font="22px Arial",ctx.textAlign="center",ctx.fillStyle="rgba(255,255,255,0.5)",ctx.fillText(`${combo.count} COMBO`,canvas.width/2,canvas.height-60),ctx.font="bold 26px Arial",ctx.fillStyle="rgba(255,255,255,0.7)",ctx.fillText(`x${combo.multiplier}`,canvas.width/2,canvas.height-30))}
let direction=null;const mousePos={x:0,y:0};canvas.addEventListener("mousemove",e=>{activeControl="mouse",mousePos.x=e.clientX,mousePos.y=e.clientY}),window.addEventListener("keydown",e=>{const t=e.key.toLowerCase();["w","s","a","d","arrowup","arrowdown","arrowleft","arrowright"].includes(t)&&(activeControl="keyboard");switch(t){case"w":case"arrowup":direction="up";break;case"s":case"arrowdown":direction="down";break;case"a":case"arrowleft":direction="left";break;case"d":case"arrowright":direction="right";break;case" ":e.preventDefault(),fireLaser()}}),window.addEventListener("keyup",e=>{const t=e.key.toLowerCase();switch(t){case"w":case"arrowup":"up"===direction&&(direction=null);break;case"s":case"arrowdown":"down"===direction&&(direction=null);break;case"a":case"arrowleft":"left"===direction&&(direction=null);break;case"d":case"arrowright":"right"===direction&&(direction=null)}}),document.getElementById("lore-title").textContent=missionData.title,document.getElementById("lore-text").textContent=missionData.lore,resizeCanvas(),createStars(),gameLoop(),window.addEventListener("resize",resizeCanvas);